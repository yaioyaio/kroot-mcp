#!/usr/bin/env node

/**
 * AIMonitor 매뉴얼 테스트
 * 
 * 실행 방법:
 * node tests/manual/test-ai-monitor.js
 */

import { AIMonitor } from '../../dist/analyzers/ai-monitor.js';
import { EventEngine } from '../../dist/events/engine.js';
import { EventCategory, EventSeverity } from '../../dist/events/types/base.js';
import { FileChangeAction } from '../../dist/events/types/file.js';
import { GitEventType } from '../../dist/events/types/git.js';

console.log('=== AIMonitor 테스트 시작 ===\n');

// EventEngine 초기화
const eventEngine = new EventEngine();
const aiMonitor = new AIMonitor();

// 이벤트를 분석기에 연결
eventEngine.subscribe('*', async (event) => {
  await aiMonitor.analyzeEvent(event);
});

// AI 사용 감지 이벤트 리스너
aiMonitor.on('aiUsageDetected', (detection) => {
  console.log(`\n🤖 AI 사용 감지: ${detection.tool}`);
  console.log(`   유형: ${detection.usageType}`);
  console.log(`   신뢰도: ${(detection.confidence * 100).toFixed(1)}%`);
  console.log(`   컨텍스트: ${detection.context}`);
});

aiMonitor.on('suggestionTracked', (suggestion) => {
  console.log(`\n💡 제안 추적: ${suggestion.tool}`);
  console.log(`   파일: ${suggestion.filePath}`);
  console.log(`   상태: ${suggestion.status}`);
  console.log(`   수정 비율: ${(suggestion.modificationRatio * 100).toFixed(1)}%`);
});

aiMonitor.on('sessionStarted', (session) => {
  console.log(`\n🚀 세션 시작: ${session.tool}`);
  console.log(`   ID: ${session.id}`);
});

aiMonitor.on('metricsUpdated', (metrics) => {
  console.log(`\n📊 메트릭 업데이트: ${metrics.tool}`);
  console.log(`   수락률: ${(metrics.acceptanceRate * 100).toFixed(1)}%`);
  console.log(`   총 상호작용: ${metrics.totalInteractions}`);
  console.log(`   시간 절약: ${metrics.timesSaved}분`);
});

// 테스트 이벤트 생성 함수들
function createClaudeFileEvent() {
  return {
    id: Math.random().toString(),
    timestamp: Date.now(),
    category: EventCategory.FILE,
    type: 'file:modified',
    severity: EventSeverity.INFO,
    source: 'test',
    data: {
      action: FileChangeAction.CHANGE,
      newFile: {
        path: '/src/components/UserProfile.tsx',
        content: `
// Generated by Claude AI
import React from 'react';

interface UserProfileProps {
  userId: string;
  name: string;
  email: string;
}

export const UserProfile: React.FC<UserProfileProps> = ({ userId, name, email }) => {
  return (
    <div className="user-profile">
      <h2>{name}</h2>
      <p>Email: {email}</p>
      <p>ID: {userId}</p>
    </div>
  );
};

// Claude suggested adding error handling here
`,
        stats: { size: 500, modified: Date.now() }
      },
      oldFile: {
        path: '/src/components/UserProfile.tsx',
        content: `
import React from 'react';

export const UserProfile = ({ userId, name, email }) => {
  return (
    <div>
      <h2>{name}</h2>
      <p>{email}</p>
    </div>
  );
};
`,
        stats: { size: 200, modified: Date.now() - 3600000 }
      }
    }
  };
}

function createCopilotFileEvent() {
  return {
    id: Math.random().toString(),
    timestamp: Date.now(),
    category: EventCategory.FILE,
    type: 'file:created',
    severity: EventSeverity.INFO,
    source: 'test',
    data: {
      action: FileChangeAction.ADD,
      newFile: {
        path: '/tests/user.test.ts',
        content: `
// Copilot generated test
describe('User', () => {
  it('should create a new user', () => {
    // Copilot suggestion
    const user = new User('John', 'john@example.com');
    expect(user.name).toBe('John');
    expect(user.email).toBe('john@example.com');
  });

  it('should validate email format', () => {
    // GitHub Copilot helped with this test
    expect(() => new User('John', 'invalid-email')).toThrow();
  });
});
`,
        stats: { size: 400, modified: Date.now() }
      }
    }
  };
}

function createChatGPTCommitEvent() {
  return {
    id: Math.random().toString(),
    timestamp: Date.now(),
    category: EventCategory.GIT,
    type: 'git:commit',
    severity: EventSeverity.INFO,
    source: 'test',
    data: {
      action: 'commit',
      repository: 'test-repo',
      branch: 'feature/ai-integration',
      commit: 'def456',
      author: 'Test User',
      message: 'feat: implement user authentication using ChatGPT suggestions',
      stats: {
        additions: 50,
        deletions: 10,
        files: 3
      }
    }
  };
}

function createCursorFileEvent() {
  return {
    id: Math.random().toString(),
    timestamp: Date.now(),
    category: EventCategory.FILE,
    type: 'file:modified',
    severity: EventSeverity.INFO,
    source: 'test',
    data: {
      action: FileChangeAction.CHANGE,
      newFile: {
        path: '/.cursor/settings.json',
        content: '{"ai_enabled": true, "model": "gpt-4"}',
        stats: { size: 50, modified: Date.now() }
      }
    }
  };
}

function createProcessEvent(processName) {
  return {
    id: Math.random().toString(),
    timestamp: Date.now(),
    category: EventCategory.PROCESS,
    type: 'process:started',
    severity: EventSeverity.INFO,
    source: 'test',
    data: {
      name: processName,
      pid: Math.floor(Math.random() * 10000),
      command: processName
    }
  };
}

// 테스트 시나리오 실행
async function runTestScenario() {
  console.log('\n=== 시나리오 1: Claude 사용 감지 ===');
  eventEngine.emit(createProcessEvent('claude'));
  await new Promise(resolve => setTimeout(resolve, 100));
  eventEngine.emit(createClaudeFileEvent());
  await new Promise(resolve => setTimeout(resolve, 500));

  console.log('\n=== 시나리오 2: GitHub Copilot 사용 감지 ===');
  eventEngine.emit(createProcessEvent('copilot'));
  await new Promise(resolve => setTimeout(resolve, 100));
  eventEngine.emit(createCopilotFileEvent());
  await new Promise(resolve => setTimeout(resolve, 500));

  console.log('\n=== 시나리오 3: ChatGPT 커밋 감지 ===');
  eventEngine.emit(createChatGPTCommitEvent());
  await new Promise(resolve => setTimeout(resolve, 500));

  console.log('\n=== 시나리오 4: Cursor 사용 감지 ===');
  eventEngine.emit(createCursorFileEvent());
  await new Promise(resolve => setTimeout(resolve, 500));

  // 최종 분석 결과 출력
  console.log('\n=== 최종 AI 협업 분석 ===');
  const analysis = aiMonitor.analyze();
  
  console.log(`\n전체 AI 기여도: ${(analysis.overallMetrics.aiContributionRatio * 100).toFixed(1)}%`);
  console.log(`생산성 향상: ${analysis.overallMetrics.productivityGain.toFixed(1)}%`);
  console.log(`총 AI 지원 시간: ${analysis.overallMetrics.totalAIAssistedTime}분`);
  
  console.log('\n도구별 분석:');
  for (const [tool, data] of Object.entries(analysis.tools)) {
    if (data) {
      console.log(`\n${tool}:`);
      console.log(`  세션: ${data.sessions}`);
      console.log(`  상호작용: ${data.interactions}`);
      console.log(`  수락률: ${(data.acceptanceRate * 100).toFixed(1)}%`);
      console.log(`  시간 절약: ${data.timesSaved}분`);
    }
  }

  console.log('\n인사이트:');
  console.log(`  가장 효과적인 도구: ${analysis.insights.mostEffectiveTool}`);
  console.log(`  최적 사용 사례: ${analysis.insights.bestUseCases.join(', ')}`);
  
  if (analysis.insights.recommendations.length > 0) {
    console.log('\n권장사항:');
    analysis.insights.recommendations.forEach((rec, idx) => {
      console.log(`  ${idx + 1}. ${rec}`);
    });
  }

  // 사용 패턴 분석
  console.log('\n=== 사용 패턴 분석 ===');
  const patterns = aiMonitor.analyzeUsagePatterns();
  patterns.forEach((pattern, tool) => {
    console.log(`\n${tool} 패턴:`);
    console.log(`  주요 사용 유형: ${pattern.patterns.mostUsedTypes.join(', ')}`);
    console.log(`  피크 시간: ${pattern.patterns.peakHours.join(', ')}시`);
    console.log(`  평균 세션 시간: ${pattern.patterns.averageSessionDuration}분`);
    console.log(`  시간당 생성 라인: ${pattern.productivity.linesGeneratedPerHour}`);
  });
}

// 테스트 실행
runTestScenario().then(() => {
  console.log('\n=== AIMonitor 테스트 완료 ===');
  process.exit(0);
}).catch(error => {
  console.error('테스트 실패:', error);
  process.exit(1);
});